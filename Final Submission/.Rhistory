BURGLRY + LARCENY + MVTHEFT + ARSON, data = modelTrain)
summary(lm0)
lm0 <- lm(pd ~ log(emp_perc) + log(unrate_perc) + imig_perc + dmig_perc + log(popFemale_perc) + AmInd_perc + Asian_perc + AfAm_perc +
Age_0_14_perc + Age_25_34_perc + Age_35_44_perc + Age_45_54_perc + Age_55_64_perc + Age_65_74_perc + Age_74_84_perc +
Age_85_perc + CPOPARST + CPOPCRIM + AG_ARRST + AG_OFF + COVIND + VIOL + PROPERTY + MURDER + RAPE + ROBBERY + AGASSLT +
BURGLRY + LARCENY + MVTHEFT + ARSON, data = modelTrain)
summary(lm0)
lm0 <- lm(pd ~ log(emp_perc) + log(unrate_perc) + imig_perc + dmig_perc + log(popFemale_perc) + log(AmInd_perc) + Asian_perc + AfAm_perc +
Age_0_14_perc + Age_25_34_perc + Age_35_44_perc + Age_45_54_perc + Age_55_64_perc + Age_65_74_perc + Age_74_84_perc +
Age_85_perc + CPOPARST + CPOPCRIM + AG_ARRST + AG_OFF + COVIND + VIOL + PROPERTY + MURDER + RAPE + ROBBERY + AGASSLT +
BURGLRY + LARCENY + MVTHEFT + ARSON, data = modelTrain)
summary(lm0)
lm0 <- lm(pd ~ log(emp_perc) + log(unrate_perc) + imig_perc + dmig_perc + log(popFemale_perc) + log(AmInd_perc) + log(Asian_perc) + AfAm_perc +
Age_0_14_perc + Age_25_34_perc + Age_35_44_perc + Age_45_54_perc + Age_55_64_perc + Age_65_74_perc + Age_74_84_perc +
Age_85_perc + CPOPARST + CPOPCRIM + AG_ARRST + AG_OFF + COVIND + VIOL + PROPERTY + MURDER + RAPE + ROBBERY + AGASSLT +
BURGLRY + LARCENY + MVTHEFT + ARSON, data = modelTrain)
summary(lm0)
lm0 <- lm(pd ~ log(emp_perc) + log(unrate_perc) + imig_perc + dmig_perc + log(popFemale_perc) + AmInd_perc + log(Asian_perc) + AfAm_perc +
Age_0_14_perc + Age_25_34_perc + Age_35_44_perc + Age_45_54_perc + Age_55_64_perc + Age_65_74_perc + Age_74_84_perc +
Age_85_perc + CPOPARST + CPOPCRIM + AG_ARRST + AG_OFF + COVIND + VIOL + PROPERTY + MURDER + RAPE + ROBBERY + AGASSLT +
BURGLRY + LARCENY + MVTHEFT + ARSON, data = modelTrain)
summary(lm0)
lm0 <- lm(pd ~ log(emp_perc) + log(unrate_perc) + imig_perc + dmig_perc + log(popFemale_perc) + AmInd_perc + log(Asian_perc) + AfAm_perc +
Age_0_14_perc + Age_25_34_perc + Age_35_44_perc + Age_45_54_perc + Age_55_64_perc + Age_65_74_perc + Age_74_84_perc +
Age_85_perc + VIOL + PROPERTY, data = modelTrain)
summary(lm0)
lm0 <- lm(pd ~ log(emp_perc) + log(unrate_perc) + imig_perc + dmig_perc + log(popFemale_perc) + AmInd_perc + log(Asian_perc) + AfAm_perc +
Age_0_14_perc + Age_25_34_perc + Age_35_44_perc + Age_45_54_perc + Age_55_64_perc + Age_65_74_perc + Age_74_84_perc +
Age_85_perc + VIOL + log(PROPERTY + ), data = modelTrain)
lm0 <- lm(pd ~ log(emp_perc) + log(unrate_perc) + imig_perc + dmig_perc + log(popFemale_perc) + AmInd_perc + log(Asian_perc) + AfAm_perc +
Age_0_14_perc + Age_25_34_perc + Age_35_44_perc + Age_45_54_perc + Age_55_64_perc + Age_65_74_perc + Age_74_84_perc +
Age_85_perc + VIOL + log(PROPERTY + 1), data = modelTrain)
summary(lm0)
lm0 <- lm(pd ~ log(emp_perc) + log(unrate_perc) + imig_perc + dmig_perc + log(popFemale_perc) + AmInd_perc + log(Asian_perc) + AfAm_perc +
Age_0_14_perc + Age_25_34_perc + Age_35_44_perc + Age_45_54_perc + Age_55_64_perc + Age_65_74_perc + Age_74_84_perc +
Age_85_perc + log(VIOL +1) + log(PROPERTY + 1), data = modelTrain)
summary(lm0)
lm0 <- lm(pd ~ log(emp_perc) + log(unrate_perc) + imig_perc + dmig_perc + log(popFemale_perc) + AmInd_perc + log(Asian_perc) + AfAm_perc +
Age_0_14_perc + Age_25_34_perc + Age_35_44_perc + Age_45_54_perc + Age_55_64_perc + Age_65_74_perc + Age_74_84_perc +
log(Age_85_perc) + log(VIOL +1) + log(PROPERTY + 1), data = modelTrain)
summary(lm0)
lm0 <- lm(pd ~ log(emp_perc) + log(unrate_perc) + imig_perc + dmig_perc + log(popFemale_perc) + AmInd_perc + log(Asian_perc) + AfAm_perc +
Age_0_14_perc + Age_25_34_perc + Age_35_44_perc + Age_45_54_perc + Age_55_64_perc + Age_65_74_perc + log(Age_74_84_perc) +
log(Age_85_perc) + log(VIOL +1) + log(PROPERTY + 1), data = modelTrain)
summary(lm0)
vif(lm0)
lm0 <- lm(pd ~ log(emp_perc) + log(unrate_perc) + imig_perc + dmig_perc + log(popFemale_perc) + AmInd_perc + log(Asian_perc) + AfAm_perc +
Age_0_14_perc + Age_25_34_perc + Age_35_44_perc + Age_45_54_perc + Age_55_64_perc + Age_65_74_perc + Age_74_84_perc +
log(Age_85_perc) + log(VIOL +1) , data = modelTrain)
summary(lm0)
vif(lm0)
lm1 <- lm(pd ~ log(emp_perc) +  imig_perc + dmig_perc + log(popFemale_perc) + log(AmInd_perc) +
log(Asian_perc) + log(AfAm_perc) +  log(Age_0_14_perc) + log(Age_25_34_perc) + log(Age_35_44_perc) + log(Age_45_54_perc) +
log(Age_55_64_perc) + log(Age_65_74_perc) + log(Age_74_84_perc) + log(Age_85_perc) + log(VIOL+1)  + log(PROPERTY +1), data = modelTrain)
summary(lm1)
lm1 <- lm(pd ~ log(unrate_perc) + imig_perc + dmig_perc + log(popFemale_perc) + log(AmInd_perc) +
log(Asian_perc) + log(AfAm_perc) +  log(Age_0_14_perc) + log(Age_25_34_perc) + log(Age_35_44_perc) + log(Age_45_54_perc) +
log(Age_55_64_perc) + log(Age_65_74_perc) + log(Age_74_84_perc) + log(Age_85_perc) + log(VIOL+1)  + log(PROPERTY +1), data = modelTrain)
summary(lm1)
lm1 <- lm(pd ~ log(emp_perc) + log(unrate_perc) + imig_perc + dmig_perc + log(popFemale_perc) + log(AmInd_perc) +
log(Asian_perc) + log(AfAm_perc) +  log(Age_0_14_perc) + log(Age_25_34_perc) + log(Age_35_44_perc) + log(Age_45_54_perc) +
log(Age_55_64_perc) + log(Age_65_74_perc) + log(Age_74_84_perc) + log(Age_85_perc) + log(VIOL+1)  + log(PROPERTY +1), data = modelTrain)
summary(lm1)
lm0 <- lm(pd ~ log(emp_perc) + log(unrate_perc) + imig_perc + dmig_perc + log(popFemale_perc) + AmInd_perc + log(Asian_perc) + AfAm_perc +
Age_0_14_perc + Age_25_34_perc + Age_35_44_perc + Age_45_54_perc + Age_55_64_perc + Age_65_74_perc + Age_74_84_perc +
log(Age_85_perc) + log(VIOL +1) + log(PROPERTY + 1), data = modelTrain)
summary(lm0)
vif(lm0)
lm0 <- lm(pd ~ log(emp_perc) + log(unrate_perc) + imig_perc + dmig_perc + log(popFemale_perc) + AmInd_perc + log(Asian_perc) + AfAm_perc +
Age_0_14_perc + Age_25_34_perc + Age_35_44_perc + Age_45_54_perc + Age_55_64_perc + Age_65_74_perc + Age_74_84_perc +
log(Age_85_perc) + log(VIOL +1), data = modelTrain)
summary(lm0)
vif(lm0)
crime2011 <- read_excel(paste0("C:/Users/rajak/OneDrive/Desktop/Study/University/ALY6015 - Intermediate Analytics/Final Project/Presidential_Election_2016_Classification/Data/Additional Data Crime.xlsx"), sheet = "CRIME 2011")
crime2011$year <- 2012
crime2015 <- read_excel(paste0("C:/Users/rajak/OneDrive/Desktop/Study/University/ALY6015 - Intermediate Analytics/Final Project/Presidential_Election_2016_Classification/Data/Additional Data Crime.xlsx"), sheet = "CRIME 2015")
crime2015$year <- 2016
crime <- rbind(crime2011, crime2015)
fun2 <- function(x){
x <- (x - mean(x))/sd(x)
x
}
for (name in names(crime)){
if(!(name %in% c('year', 'FIPS_COUNTY'))){
crime[, name] <- fun2( crime[, name][[1]] )
}
}
modelDataNew2$c_fips <- as.factor(modelDataNew2$c_fips)
crime$FIPS_COUNTY <- as.factor(crime$FIPS_COUNTY)
modelDataNew2$year <- as.factor(modelDataNew2$year)
crime$year <- as.factor(crime$year)
modelDataNew3 <- modelDataNew2 %>% inner_join(crime, by = c("c_fips" = "FIPS_COUNTY", "year" = "year"))
lm1 <- lm(pd ~ ., data = modelTrain)
summary(lm1)
vif(lm1)
lm1 <- lm(pd ~ emp_perc + unrate_perc + imig_perc + dmig_perc + popFemale_perc + AmInd_perc + Asian_perc + AfAm_perc + Age_0_14_perc +
Age_25_34_perc + Age_35_44_perc + Age_45_54_perc + Age_55_64_perc + Age_65_74_perc + Age_74_84_perc + Age_85_perc +
VIOL + PROPERTY + MURDER + RAPE + ROBBERY + AGASSLT + BURGLRY + LARCENY + MVTHEFT + ARSON, data = modelTrain)
summary(lm1)
vif(lm1)
options(scipen = 22)
lm1 <- lm(pd ~ emp_perc + unrate_perc + imig_perc + dmig_perc + popFemale_perc + AmInd_perc + Asian_perc + AfAm_perc + Age_0_14_perc +
Age_25_34_perc + Age_35_44_perc + Age_45_54_perc + Age_55_64_perc + Age_65_74_perc + Age_74_84_perc + Age_85_perc +
VIOL + PROPERTY + MURDER + RAPE + ROBBERY + AGASSLT + BURGLRY + LARCENY + MVTHEFT + ARSON, data = modelTrain)
summary(lm1)
vif(lm1)
lm1 <- lm(pd ~ emp_perc + unrate_perc + imig_perc + dmig_perc + popFemale_perc + AmInd_perc + Asian_perc + AfAm_perc + Age_0_14_perc +
Age_25_34_perc + Age_35_44_perc + Age_45_54_perc + Age_55_64_perc + Age_65_74_perc + Age_74_84_perc + Age_85_perc +
VIOL + PROPERTY, data = modelTrain)
summary(lm1)
vif(lm1)
lm1 <- lm(pd ~ emp_perc + unrate_perc + imig_perc + dmig_perc + popFemale_perc + AmInd_perc + Asian_perc + AfAm_perc + Age_0_14_perc +
Age_25_34_perc + Age_35_44_perc + Age_45_54_perc + Age_55_64_perc + Age_65_74_perc +  Age_85_perc +
VIOL + PROPERTY, data = modelTrain)
summary(lm1)
vif(lm1)
lm1 <- lm(pd ~ emp_perc + unrate_perc + imig_perc + dmig_perc + popFemale_perc + AmInd_perc + Asian_perc + AfAm_perc + Age_0_14_perc +
Age_25_34_perc + Age_35_44_perc + Age_45_54_perc + Age_55_64_perc + Age_65_74_perc +  Age_85_perc + VIOL, data = modelTrain)
summary(lm1)
vif(lm1)
lm2 <- lm(pd ~ log(emp_perc) + unrate_perc + imig_perc + dmig_perc + popFemale_perc + AmInd_perc + Asian_perc + AfAm_perc + Age_0_14_perc +
Age_25_34_perc + Age_35_44_perc + Age_45_54_perc + Age_55_64_perc + Age_65_74_perc +  Age_85_perc + VIOL, data = modelTrain)
summary(lm2)
lm2 <- lm(pd ~ log(emp_perc) + log(unrate_perc) + imig_perc + dmig_perc + popFemale_perc + AmInd_perc + Asian_perc + AfAm_perc + Age_0_14_perc +
Age_25_34_perc + Age_35_44_perc + Age_45_54_perc + Age_55_64_perc + Age_65_74_perc +  Age_85_perc + VIOL, data = modelTrain)
summary(lm2)
lm2 <- lm(pd ~ log(emp_perc) + log(unrate_perc) + imig_perc + dmig_perc + log(popFemale_perc) + AmInd_perc + Asian_perc + AfAm_perc + Age_0_14_perc +
Age_25_34_perc + Age_35_44_perc + Age_45_54_perc + Age_55_64_perc + Age_65_74_perc +  Age_85_perc + VIOL, data = modelTrain)
summary(lm2)
lm2 <- lm(pd ~ log(emp_perc) + log(unrate_perc) + imig_perc + dmig_perc + log(popFemale_perc) + log(AmInd_perc) + Asian_perc + AfAm_perc + Age_0_14_perc +
Age_25_34_perc + Age_35_44_perc + Age_45_54_perc + Age_55_64_perc + Age_65_74_perc +  Age_85_perc + VIOL, data = modelTrain)
summary(lm2)
vif(lm1)
lm2 <- lm(pd ~ log(emp_perc) + log(unrate_perc) + imig_perc + dmig_perc + log(popFemale_perc) + log(AmInd_perc) + log(Asian_perc) + AfAm_perc + Age_0_14_perc +
Age_25_34_perc + Age_35_44_perc + Age_45_54_perc + Age_55_64_perc + Age_65_74_perc +  Age_85_perc + VIOL, data = modelTrain)
summary(lm2)
lm2 <- lm(pd ~ log(emp_perc) + log(unrate_perc) + imig_perc + dmig_perc + log(popFemale_perc) + AmInd_perc + Asian_perc + AfAm_perc + Age_0_14_perc +
Age_25_34_perc + Age_35_44_perc + Age_45_54_perc + Age_55_64_perc + Age_65_74_perc +  Age_85_perc + VIOL, data = modelTrain)
summary(lm2)
lm2 <- lm(pd ~ log(emp_perc) + log(unrate_perc) + imig_perc + dmig_perc + popFemale_perc + AmInd_perc + Asian_perc + AfAm_perc + Age_0_14_perc +
Age_25_34_perc + Age_35_44_perc + Age_45_54_perc + Age_55_64_perc + Age_65_74_perc +  Age_85_perc + VIOL, data = modelTrain)
summary(lm2)
set.seed(454)
View(modelTrain)
train <- modelTrain
test <- modelTest
train_x <- model.matrix(pd2016 ~ ., train)[, -1]
train_x <- model.matrix(pd ~ ., train)[, -1]
test_x <- model.matrix(pd ~ ., test)[, -1]
View(modelTest)
modelTrainLasso <- modelDataNew3 %>% filter(year == 2012) %>% dplyr::select(-year, -c_fips)
modelTestLasso <- modelDataNew3 %>% filter(year == 2016) %>% dplyr::select(-year, -c_fips)
View(modelTest)
train <- modelTrainLasso
test <- modelTestLasso
train_x <- model.matrix(pd ~ ., train)[, -1]
test_x <- model.matrix(pd ~ ., test)[, -1]
test_y <- test$pd
################################################################
# Find best value of Lambda using Cross-Validation
################################################################
set.seed(454)
cv.lasso <- cv.glmnet(train_x, train_y)
train_y
test_y
train_x
cv.lasso <- cv.glmnet(train_x, train_y)
nrow(train_x)
nrow(test_x)
length(train_y)
length(test_y)
nrow(train)
train_y <- train$pd
test_y <- test$pd
################################################################
# Find best value of Lambda using Cross-Validation
################################################################
set.seed(454)
cv.lasso <- cv.glmnet(train_x, train_y)
plot(cv.lasso)
################################################################
# Optimal Value of Lambda; Minimizes the Prediction Error
# Lambda Min - Minimizes out of sample loss
# Lambda 1SE - Largest value of Lambda within 1 Standard Error of Lambda Min.
################################################################
log(cv.lasso$lambda.min)
log(cv.lasso$lambda.1se)
# Fit the model on training set using lambda.min
model.lasso.min <- glmnet(train_x, train_y, alpha = 1, lambda = cv.lasso$lambda.min)
# Display Regression Coefficients
coef(model.lasso.min)
# Fit the model on training set using lambda.min
model.lasso.min <- glmnet(train_x, train_y, alpha = 1, lambda = cv.lasso$lambda.1se)
# Display Regression Coefficients
coef(model.lasso.min)
# Display Regression Coefficients
coef(model.lasso.min)[1]
# Display Regression Coefficients
coef(model.lasso.min)[[1]]
# Display Regression Coefficients
coef(model.lasso.min)
# Display Regression Coefficients
rownames(coef(model.lasso.min))
# Display Regression Coefficients
coef(model.lasso.min)
lm3 <- lm(pd ~ unrate_perc + imig_perc + dmig_perc + popFemale_perc + AmInd_perc + Asian_perc + AfAm_perc + Age_0_14_perc +
Age_45_54_perc + Age_55_64_perc + Age_65_74_perc + Age_74_84_perc + Age_85_perc + VIOL, data = modelTrain)
summary(lm3)
vif(lm1)
lm3 <- lm(pd ~ log(unrate_perc) + imig_perc + dmig_perc + popFemale_perc + AmInd_perc + Asian_perc + AfAm_perc + Age_0_14_perc +
Age_45_54_perc + Age_55_64_perc + Age_65_74_perc + Age_74_84_perc + Age_85_perc + VIOL, data = modelTrain)
summary(lm3)
lm3 <- lm(pd ~ log(unrate_perc) + log(imig_perc) + dmig_perc + popFemale_perc + AmInd_perc + Asian_perc + AfAm_perc + Age_0_14_perc +
Age_45_54_perc + Age_55_64_perc + Age_65_74_perc + Age_74_84_perc + Age_85_perc + VIOL, data = modelTrain)
summary(lm3)
location_harshit <- "~/Documents/Northeastern University/MPS Analytics/ALY 6015/Final Project/Presidential_Election_2016_Classification/"
location_akash <- "C:/Users/rajak/OneDrive/Desktop/Study/University/ALY6015 - Intermediate Analytics/Final Project/Presidential_Election_2016_Classification/"
location <- ifelse(!dir.exists(paths = location_harshit), location_akash, location_harshit)
source(paste0(location, "Final Submission/Helper.R"))
# Import the Packages
declareAndImportPackages()
# Import/Load the data set
ElectionData <- loadData(location)
# Get a Glimpse/View of the data set
glimpse(ElectionData)
threeLineTable(ElectionData[1:5, 4:11], "Table 1: Snapshot of Data", "Snapshot of Election Data Sample", "Data Snapshot")
# ------------------------------------- Merging External Data sets ----------------------------------- #
# Reading new external data set
population <- read.csv(paste0(location, "Data/USPopulationByCounty.csv"))
election2020 <- read.csv(paste0(location, "Data/2020ElectionResults.csv"))
region <- read.csv(paste0(location, "Data/Regions.csv"))
# Reading Multiple Sheets from Excel Workbook
raceAgeGender2011And2015_Path <- paste0(location, "Data/Additional Data.xlsx")
raceAgeGender2011And2015_SheetNames <- excel_sheets(raceAgeGender2011And2015_Path)
raceAgeGender2011And2015_List <- lapply(raceAgeGender2011And2015_SheetNames, read_excel, path = raceAgeGender2011And2015_Path)
names(raceAgeGender2011And2015_List) <- raceAgeGender2011And2015_SheetNames
list2env(raceAgeGender2011And2015_List, .GlobalEnv)
# Combining the external data sets with the original election data sets
ElectionData <- ElectionData %>% inner_join(population, by = c("county", "state"))
# --------------------------------------------#
election2020$county_fips <- as.factor(election2020$county_fips)
ElectionData$c_fips <- as.factor(ElectionData$c_fips)
ElectionData <- ElectionData %>% inner_join(election2020, by = c("c_fips" = "county_fips"))
# --------------------------------------------#
ElectionData <- ElectionData %>% inner_join(region, by = c("state" = "state.code"))
# --------------------------------------------#
ElectionData_GenderAgeRace <- ElectionData %>% inner_join(
`Gender 2011` %>% mutate(`County Code` = factor(`County Code`)) %>% dplyr::select(Female, Male, `County Code`) %>%
rename(population.female.2011 = Female, population.male.2011 = Male),
by = c("c_fips" = "County Code"))
# --------------------------------------------#
ElectionData_GenderAgeRace <- ElectionData_GenderAgeRace %>% inner_join(
`Gender 2015` %>% mutate(`County Code` = factor(`County Code`)) %>% dplyr::select(Female, Male, `County Code`) %>%
rename(population.female.2015 = Female, population.male.2015 = Male),
by = c("c_fips" = "County Code"))
# --------------------------------------------#
ElectionData_GenderAgeRace <- ElectionData_GenderAgeRace %>% inner_join(
`Race 2011` %>% mutate(`County Code` = factor(`County Code`)) %>% dplyr::select(`American Indian or Alaska Native`, `Asian or Pacific Islander`, `Black or African American`, `White`, `County Code`) %>%
rename(`American Indian or Alaska Native.2011` = `American Indian or Alaska Native`, `Asian or Pacific Islander.2011` = `Asian or Pacific Islander`, `Black or African American.2011` = `Black or African American`, `White.2011` = `White`),
by = c("c_fips" = "County Code"))
# --------------------------------------------#
ElectionData_GenderAgeRace <- ElectionData_GenderAgeRace %>% inner_join(
`Race 2015` %>% mutate(`County Code` = factor(`County Code`)) %>% dplyr::select(`American Indian or Alaska Native`, `Asian or Pacific Islander`, `Black or African American`, `White`, `County Code`) %>%
rename(`American Indian or Alaska Native.2015` = `American Indian or Alaska Native`, `Asian or Pacific Islander.2015` = `Asian or Pacific Islander`, `Black or African American.2015` = `Black or African American`, `White.2015` = `White`),
by = c("c_fips" = "County Code"))
icol <- which(names(`Age 2011`) %in% c("County Code", "County", "State"))
colnames(`Age 2011`)[-icol] <- paste0(colnames(`Age 2011`)[-icol], ".2011")
ElectionData_GenderAgeRace <- ElectionData_GenderAgeRace %>% inner_join(
`Age 2011` %>% mutate(`County Code` = factor(`County Code`)),
by = c("c_fips" = "County Code"))
icol <- which(names(`Age 2015`) %in% c("County Code", "County", "State"))
colnames(`Age 2015`)[-icol] <- paste0(colnames(`Age 2015`)[-icol], ".2015")
ElectionData_GenderAgeRace <- ElectionData_GenderAgeRace %>% inner_join(
`Age 2015` %>% mutate(`County Code` = factor(`County Code`)),
by = c("c_fips" = "County Code"))
# Generate Three Line Tables for External Data
threeLineTableForExternalData()
# Remove Unnecessary Resources
rm(list = c("population", "election2020", "region", "icol",
"raceAgeGender2011And2015_Path", "raceAgeGender2011And2015_SheetNames", "raceAgeGender2011And2015_List",
"Gender 2011", "Gender 2015", "Race 2011", "Race 2015", "Age 2011", "Age 2015")
)
# Since, libertarian feature has almost all the data points as NA. We're removing it for now to check other NA cases
# Also, Dropping unnecessary/duplicate features
ElectionData <- ElectionData %>% dplyr::select(-libertarian)
ElectionData_GenderAgeRace <- ElectionData_GenderAgeRace %>% dplyr::select(-libertarian, -State, -County.x, -County.y)
ElectionData$ruc03 <- sapply(ElectionData$ruc03, as.factor)
ElectionData$ruc13 <- sapply(ElectionData$ruc13, as.factor)
ElectionData_GenderAgeRace$ruc03 <- sapply(ElectionData_GenderAgeRace$ruc03, as.factor)
ElectionData_GenderAgeRace$ruc13 <- sapply(ElectionData_GenderAgeRace$ruc13, as.factor)
# Checking the records with missing/NA values
missingRecords <- ElectionData %>% filter(!complete.cases(ElectionData))
threeLineTable(missingRecords[, 4:11], "Table 5: Records with missing data", "", "Missing Data")
# Retrieving the names of features with missing values.
missingValuesCols <- names(which(colSums(is.na(ElectionData)) > 0))
# Imputing missing values with their respective features' mean value
for(i in 1:ncol(ElectionData)) {
ifelse(is.numeric(ElectionData[,i]),
ElectionData[is.na(ElectionData[,i]), i] <- mean(ElectionData[,i], na.rm = TRUE),
ifelse(is.character(ElectionData[,i]), "NULL", 0)
)
}
for(i in 1:ncol(ElectionData_GenderAgeRace)) {
ifelse(is.numeric(ElectionData_GenderAgeRace[,i]),
ElectionData_GenderAgeRace[is.na(ElectionData_GenderAgeRace[,i]), i] <- mean(ElectionData_GenderAgeRace[,i], na.rm = TRUE),
ifelse(is.character(ElectionData_GenderAgeRace[,i]), "NULL", 0)
)
}
# Factorize these 'Quality Assessment Texts' in the data set
ElectionData[sapply(ElectionData, is.character)] <- lapply(ElectionData[sapply(ElectionData, is.character)], as.factor)
ElectionData_GenderAgeRace[sapply(ElectionData_GenderAgeRace, is.character)] <- lapply(ElectionData_GenderAgeRace[sapply(ElectionData_GenderAgeRace, is.character)], as.factor)
###########################################################################################
#                               Creating Variables for 2020                               #
###########################################################################################
# Creating variables for 2020 Predictions
ElectionData$pd2020 <- round(ElectionData$democrats / (ElectionData$democrats + ElectionData$green + ElectionData$other + ElectionData$republican), 2)
View(ElectionData)
###########################################################################################
#                               Creating Variables for 2020                               #
###########################################################################################
# Creating variables for 2020 Predictions
ElectionData$pd2020 <- round(ElectionData$democrats / (ElectionData$democrats + ElectionData$green + ElectionData$other + ElectionData$republican), 2)
ElectionData$pg2020 <- round(ElectionData$republican / (ElectionData$democrats + ElectionData$green + ElectionData$other + ElectionData$republican), 2)
ElectionDataEDA <- ElectionData %>%
dplyr::select(v2016, pd2016, pg2016, ppd2016, v2012, pd2012, pg2012, ppd2012, v2008, pd2008, pg2008, ppd2012, population.2016, geograhic.region)
describeTable <- ElectionDataEDA %>% dplyr::select(pd2016, pg2016, ppd2016, pd2012, pg2012, ppd2012, pd2008, pg2008, ppd2012, population.2016)
overallStats <- describeTable %>%   describe(quant = c(.25, .75), IQR = TRUE)
overallStats <- round(overallStats, 2)
overallStats$vars <- rownames(overallStats)
options(scipen = 22)
threeLineTable(overallStats, "Table : Descriptive statistics of overall data", "", "Descriptive stats")
percDemocraticVotesStats <- ElectionDataEDA %>% dplyr::select(pd2008, pd2012, pd2016) %>%   describe(quant = c(.25, .75), IQR = TRUE) %>%
mutate(year = c(2008, 2012, 2016)) %>% relocate(year)
threeLineTable(percDemocraticVotesStats, "Table 6: Descriptive statistics of Democratic party %votes by year", "", "Democratic votes")
percRepublicanVotesStats <- ElectionDataEDA %>% dplyr::select(pg2008, pg2012, pg2016) %>% describe(quant = c(.25, .75), IQR = TRUE) %>%
mutate(year = c(2008, 2012, 2016)) %>% relocate(year)
threeLineTable(percRepublicanVotesStats, "Table 7: Descriptive statistics of Republican party %votes by year", "", "Republican votes")
percRepublicanVotesStatsSouth <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pg2016) %>% filter(geograhic.region == "South") %>%
dplyr::select(-geograhic.region) %>% describe(quant = c(.25, .75), IQR = TRUE) %>% mutate(vars = "South")
percRepublicanVotesStatsWest <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pg2016) %>% filter(geograhic.region == "West") %>%
dplyr::select(-geograhic.region) %>% describe(quant = c(.25, .75), IQR = TRUE) %>% mutate(vars = "West")
percRepublicanVotesStatsNE <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pg2016) %>% filter(geograhic.region == "Northeast") %>%
dplyr::select(-geograhic.region) %>% describe(quant = c(.25, .75), IQR = TRUE) %>% mutate(vars = "Northeast")
percRepublicanVotesStatsMid <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pg2016) %>% filter(geograhic.region == "Midwest") %>%
dplyr::select(-geograhic.region) %>% describe(quant = c(.25, .75), IQR = TRUE) %>% mutate(vars = "Midwest")
percRepublicanVotesStatReg <- rbind(percRepublicanVotesStatsSouth, percRepublicanVotesStatsWest, percRepublicanVotesStatsNE,
percRepublicanVotesStatsMid)
threeLineTable(percRepublicanVotesStatReg, "Table 7: Descriptive statistics of Republican party %votes by region", "", "Republican votes region")
# Plot of outcome variable '% Democratic Votes' by region and year
percDVotesL <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pd2008, pd2012, pd2016) %>% group_by(geograhic.region) %>% summarise('2008' = mean(pd2008, na.rm = TRUE),
'2012' = mean(pd2012, na.rm = TRUE),
'2016' = mean(pd2016, na.rm = TRUE)) %>%
gather(year, pdVotes, c('2008', '2012', '2016'))
ggplot(data = percDVotesL, mapping = aes(x = reorder(factor(geograhic.region), pdVotes, function(x) -1*sum(x)), y = pdVotes, fill = year)) +
geom_bar(position = "dodge", stat = "identity") +
labs(title = "Percentage Democrat Votes by Region & Year") +
scale_x_discrete(name ="Region") +
scale_y_continuous(name = "Percent Democrat Votes") +
theme_bw()
# Plot of outcome variable '% Republican Votes' by region and year
percRVotesL <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pd2008, pd2012, pd2016) %>% group_by(geograhic.region) %>% summarise('2008' = mean(pd2008, na.rm = TRUE),
'2012' = mean(pd2012, na.rm = TRUE),
'2016' = mean(pd2016, na.rm = TRUE)) %>%
gather(year, pgVotes, c('2008', '2012', '2016'))
ggplot(data = percRVotesL, mapping = aes(x = reorder(factor(geograhic.region), pgVotes, function(x) -1*sum(x)), y = pgVotes, fill = year)) +
geom_bar(position = "dodge", stat = "identity") + labs(title = "Percent Republican Votes by Region & Year") +
scale_x_discrete(name ="Region") +  scale_y_continuous(name = "Percent Republican Votes") + theme_bw()
View(ElectionDataEDA)
View(ElectionData)
names(ElectionData)
edaData <- ElectionData %>% dplyr::select(pd2016, emp12, geograhic.region)
ggplot(data = edaData) +
geom_point(mapping = aes(x = emp12, y = pd2016, fill = geograhic.region))
ggplot(data = edaData) +
geom_point(mapping = aes(x = emp12, y = pd2016), fill = geograhic.region)
ggplot(data = edaData) +
geom_point(mapping = aes(x = emp12, y = pd2016, fill = geograhic.region))
write.csv(edaData, "edaData.csv")
getwd()
ggplot(data = edaData) +
geom_point(mapping = aes(x = emp12, y = pd2016, col = geograhic.region))
View(ElectionData)
edaData <- ElectionData %>% dplyr::select(pd2016, emp12, geograhic.region, population.2012) %>% mutate(emp = geograhic.region/population.2012)
edaData <- ElectionData %>% dplyr::select(pd2016, emp12, geograhic.region, population.2012) %>% mutate(emp = geograhic.region/`population.2012`)
edaData <- ElectionData %>% dplyr::select(pd2016, emp12, geograhic.region, population.2012) %>% mutate(emp = emp12/population.2012)
ggplot(data = edaData) +
geom_point(mapping = aes(x = emp, y = pd2016, col = geograhic.region))
ggplot(data = edaData[which(edaData$emp <= 75,)]) +
geom_point(mapping = aes(x = emp, y = pd2016, col = geograhic.region))
ggplot(data = edaData[which(edaData$emp <= 75),]) +
geom_point(mapping = aes(x = emp, y = pd2016, col = geograhic.region))
ggplot(data = edaData[which(edaData$emp <= 50),]) +
geom_point(mapping = aes(x = emp, y = pd2016, col = geograhic.region))
ggplot(data = edaData[which(edaData$emp <= 20),]) +
geom_point(mapping = aes(x = emp, y = pd2016, col = geograhic.region))
ggplot(data = edaData[which(edaData$emp <= 20),]) +
geom_point(mapping = aes(x = log(emp), y = pd2016, col = geograhic.region))
ggplot(data = edaData[which(edaData$emp <= 20),]) +
geom_point(mapping = aes(x = log(emp), y = log(pd2016), col = geograhic.region))
ggplot(data = edaData[which(edaData$emp <= 20),]) +
geom_point(mapping = aes(x = emp, y = log(pd2016), col = geograhic.region))
ggplot(data = edaData[which(edaData$emp <= 20),]) +
geom_point(mapping = aes(x = log(emp), y = log(pd2016), col = geograhic.region))
ggplot(data = edaData[which(edaData$emp <= 20),]) +
geom_point(mapping = aes(x = emp, y = pd2016, col = geograhic.region)) +
labs(title = "Scatter plot between % Democratic votes and employment rate", x = "Employement Rate", y = "% Democratic votes") +
theme_minimal()
ggplot(data = edaData[which(edaData$emp <= 20),]) +
geom_point(mapping = aes(x = emp, y = pd2016*100, col = geograhic.region)) +
labs(title = "Scatter plot between % Democratic votes and employment rate", x = "Employement Rate", y = "% Democratic votes") +
theme_minimal()
ggplot(data = edaData[which(edaData$emp <= 20),]) +
geom_point(mapping = aes(x = emp, y = pd2016*100, col = geograhic.region)) +
labs(title = "Scatter plot between % Democratic votes and employment rate", x = "Employement Rate (in %)", y = "% Democratic votes") +
theme_minimal()
ggplot(data = edaData[which(edaData$emp <= 20),]) +
geom_point(mapping = aes(x = emp, y = pd2016*100, col = geograhic.region)) +
labs(title = "Scatter plot between % Democratic votes and employment rate", x = "Employement Rate (in %)", y = "% Democratic votes") +
guides(fill=guide_legend(title="New Legend Title")) +
theme_minimal()
ggplot(data = edaData[which(edaData$emp <= 20),]) +
geom_point(mapping = aes(x = emp, y = pd2016*100, col = geograhic.region)) +
labs(title = "Scatter plot between % Democratic votes and employment rate", x = "Employement Rate (in %)", y = "% Democratic votes") +
scale_fill_discrete(name = "New Legend Title") +
theme_minimal()
names(edaData)
names(edaData)[3] <- "Geographic Region"
ggplot(data = edaData[which(edaData$emp <= 20),]) +
geom_point(mapping = aes(x = emp, y = pd2016*100, col = geograhic.region)) +
labs(title = "Scatter plot between % Democratic votes and employment rate", x = "Employement Rate (in %)", y = "% Democratic votes") +
scale_fill_discrete(name = "New Legend Title") +
theme_minimal()
ggplot(data = edaData[which(edaData$emp <= 20),]) +
geom_point(mapping = aes(x = emp, y = pd2016*100, col = `Geographic Region`)) +
labs(title = "Scatter plot between % Democratic votes and employment rate", x = "Employement Rate (in %)", y = "% Democratic votes") +
scale_fill_discrete(name = "New Legend Title") +
theme_minimal()
ggplot(data = edaData[which(edaData$emp <= 20),]) +
geom_point(mapping = aes(x = emp, y = pd2016*100, col = `Geographic Region`)) +
labs(title = "Scatter plot between % Democratic votes and employment rate", x = "Employement Rate (in %)", y = "% Democratic votes") +
scale_fill_discrete(name = "New Legend Title") +
theme_blank()
ggplot(data = edaData[which(edaData$emp <= 20),]) +
geom_point(mapping = aes(x = emp, y = pd2016*100, col = `Geographic Region`)) +
labs(title = "Scatter plot between % Democratic votes and employment rate", x = "Employement Rate (in %)", y = "% Democratic votes") +
scale_fill_discrete(name = "New Legend Title") +
theme_bw()
ggplot(data = edaData[which(edaData$emp <= 20),]) +
geom_point(mapping = aes(x = emp, y = pd2016*100, col = `Geographic Region`)) +
labs(title = "Scatter plot between % Democratic votes and employment rate", x = "Employement Rate (in %)", y = "% Democratic votes") +
scale_fill_discrete(name = "New Legend Title") +
theme_minimal()
ggplot(data = edaData[which(edaData$emp <= 20),]) +
geom_point(mapping = aes(x = emp, y = pd2016*100, col = `Geographic Region`)) +
labs(title = "Scatter plot between % Democratic votes and employment rate", x = "Employement Rate (in %)", y = "% Democratic votes") +
scale_fill_discrete(name = "New Legend Title") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme_minimal()
ggplot(data = edaData[which(edaData$emp <= 20),]) +
geom_point(mapping = aes(x = emp, y = pd2016*100, col = `Geographic Region`)) +
labs(title = "Scatter plot between % Democratic votes and employment rate", x = "Employement Rate (in %)", y = "% Democratic votes") +
scale_fill_discrete(name = "New Legend Title") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme_minimal()
ggplot(data = edaData[which(edaData$emp <= 20),]) +
geom_point(mapping = aes(x = emp, y = pd2016*100, col = `Geographic Region`)) +
labs(title = "Scatter plot between % Democratic votes and employment rate", x = "Employement Rate (in %)", y = "% Democratic votes") +
scale_fill_discrete(name = "New Legend Title") +
theme(panel.grid = element_blank()) +
theme_minimal()
ggplot(data = edaData[which(edaData$emp <= 20),]) +
geom_point(mapping = aes(x = emp, y = pd2016*100, col = `Geographic Region`)) +
labs(title = "Scatter plot between % Democratic votes and employment rate", x = "Employement Rate (in %)", y = "% Democratic votes") +
scale_fill_discrete(name = "New Legend Title") +
theme(panel.grid.minor = element_blank()) +
theme_minimal()
ggplot(data = edaData[which(edaData$emp <= 20),]) +
geom_point(mapping = aes(x = emp, y = pd2016*100, col = `Geographic Region`)) +
labs(title = "Scatter plot between % Democratic votes and employment rate", x = "Employement Rate (in %)", y = "% Democratic votes") +
scale_fill_discrete(name = "New Legend Title") +
theme_bw()
ggplot(data = edaData[which(edaData$emp <= 20),]) +
geom_point(mapping = aes(x = log(emp), y = log(pd2016*100), col = `Geographic Region`)) +
labs(title = "Scatter plot between % Democratic votes and employment rate", x = "Employement Rate (in %)", y = "% Democratic votes") +
scale_fill_discrete(name = "New Legend Title") +
theme_bw()
ggplot(data = edaData[which(edaData$emp <= 20),]) +
geom_point(mapping = aes(x = log(emp), y = log(pd2016*100), col = `Geographic Region`)) +
labs(title = "Scatter plot between % Democratic votes and employment rate", x = "Employement Rate (after log transformation)", y = "% Democratic votes after log transformation") +
scale_fill_discrete(name = "New Legend Title") +
theme_bw()
ggplot(data = edaData[which(edaData$emp <= 20),]) +
geom_point(mapping = aes(x = log(emp), y = log(pd2016*100), col = `Geographic Region`)) +
labs(title = "Scatter plot between % Democratic votes and employment rate", x = "Employement Rate (after log transformation)", y = "% Democratic votes") +
scale_fill_discrete(name = "New Legend Title") +
theme_bw()
ggplot(data = edaData[which(edaData$emp <= 20),]) +
geom_point(mapping = aes(x = emp, y = pd2016*100, col = `Geographic Region`)) +
labs(title = "Scatter plot between % Democratic votes and employment rate", x = "Employement Rate (in %)", y = "% Democratic votes") +
scale_fill_discrete(name = "New Legend Title") +
theme_bw()
ggplot(data = edaData[which(edaData$emp <= 20),]) +
geom_point(mapping = aes(x = log(emp), y = log(pd2016*100), col = `Geographic Region`)) +
labs(title = "Scatter plot between % Democratic votes and employment rate (after log transformation)", x = "Employement Rate ", y = "% Democratic votes") +
scale_fill_discrete(name = "New Legend Title") +
theme_bw()
