theme(axis.ticks = element_blank(), axis.text.y = element_blank()) +
labs(title = "Boxplot of Total Votes by Year") +
scale_x_continuous(name = "Total Votes", labels = label_number(suffix = " M", scale = 1e-6)) +
theme_bw()
# Boxplot of total democrat votes by year
ggplot(data = totalDVotesL) +
geom_boxplot(mapping = aes(tDVotes, fill = year), notch = TRUE) +
theme(axis.ticks = element_blank(), axis.text.y = element_blank()) +
labs(title = "Boxplot of Total Votes by Year") +
scale_x_continuous(name = "Total Votes", labels = label_number(suffix = " M", scale = 1e-6)) +
theme_bw()
View(totalDVotesL)
# Boxplot of total democrat votes by year
ggplot(data = totalDVotesL) +
geom_boxplot(mapping = aes(tdVotes, fill = year), notch = TRUE) +
theme(axis.ticks = element_blank(), axis.text.y = element_blank()) +
labs(title = "Boxplot of Total Votes by Year") +
scale_x_continuous(name = "Total Votes", labels = label_number(suffix = " M", scale = 1e-6)) +
theme_bw()
# Boxplot of total republican votes by year
ggplot(data = totalRVotesL) +
geom_boxplot(mapping = aes(trVotes, fill = year), notch = TRUE) +
theme(axis.ticks = element_blank(), axis.text.y = element_blank()) +
labs(title = "Boxplot of Total Votes by Year") +
scale_x_continuous(name = "Total Votes", labels = label_number(suffix = " M", scale = 1e-6)) +
theme_bw()
View(totalRVotesL)
# Boxplot of total republican votes by year
ggplot(data = totalRVotesL) +
geom_boxplot(mapping = aes(tgVotes, fill = year), notch = TRUE) +
theme(axis.ticks = element_blank(), axis.text.y = element_blank()) +
labs(title = "Boxplot of Total Votes by Year") +
scale_x_continuous(name = "Total Votes", labels = label_number(suffix = " M", scale = 1e-6)) +
theme_bw()
# ------------------------ Subgroup Analysis ------------------------ #
# Boxplot of total votes by year
ggplot(data = totalVotesL) +
geom_boxplot(mapping = aes(tVotes, fill = year), notch = TRUE) +
theme(axis.ticks = element_blank(), axis.text.y = element_blank()) +
labs(title = "Boxplot of Total Votes by Year") +
scale_x_continuous(name = "Total Votes", labels = label_number(suffix = " M", scale = 1e-6)) +
theme_bw()
# Boxplot of total democrat votes by year
ggplot(data = totalDVotesL) +
geom_boxplot(mapping = aes(tdVotes, fill = year), notch = TRUE) +
theme(axis.ticks = element_blank(), axis.text.y = element_blank()) +
labs(title = "Boxplot of Total Democrat Votes by Year") +
scale_x_continuous(name = "Total Votes", labels = label_number(suffix = " M", scale = 1e-6)) +
theme_bw()
# Boxplot of total republican votes by year
ggplot(data = totalRVotesL) +
geom_boxplot(mapping = aes(tgVotes, fill = year), notch = TRUE) +
theme(axis.ticks = element_blank(), axis.text.y = element_blank()) +
labs(title = "Boxplot of Total Republican Votes by Year") +
scale_x_continuous(name = "Total Votes", labels = label_number(suffix = " M", scale = 1e-6)) +
theme_bw()
View(ElectionData)
# Declaring the names of packages to be imported
packageList <- c("tidyverse", "vtable", "RColorBrewer", "corrplot", "car", "psych", "stargazer", "scales", "glmnet", "Metrics", "caret", "leaps", "MASS")
for (package in packageList) {
if (!package %in% rownames(installed.packages()))
{ install.packages(package) }
# Import the package
library(package, character.only = TRUE)
}
# Import/Load the data set
location_harshit <- "~/Documents/Northeastern University/MPS Analytics/ALY 6015/Final Project/Presidential_Election_2016_Classification/"
location_akash <- "C:/Users/rajak/OneDrive/Desktop/Study/University/ALY6015 - Intermediate Analytics/Final Project/Presidential_Election_2016_Classification/"
location <- ifelse(!dir.exists(paths = location_harshit), location_akash, location_harshit)
ElectionData <- read.csv(paste0(location, "Data/2016Election.csv"))
# ------------------------------------- Merging External Data sets ----------------------------------- #
# Reading new external data set
population <- read.csv(paste0(location, "Data/USPopulationByCounty.csv"))
election2020 <- read.csv(paste0(location, "Data/2020ElectionResults.csv"))
region <- read.csv(paste0(location, "Data/Regions.csv"))
# Combining the external data sets with the original election data sets
ElectionData <- ElectionData %>% inner_join(population, by = c("county", "state"))
election2020$county_fips <- as.factor(election2020$county_fips)
ElectionData$c_fips <- as.factor(ElectionData$c_fips)
ElectionData <- ElectionData %>% inner_join(election2020, by = c("c_fips" = "county_fips"))
ElectionData <- ElectionData %>% inner_join(region, by = c("state" = "state.code"))
################################################################
# Checking the records with missing/NA values
################################################################
# Since, libertarian feature has almost all the data points as NA. We're removing it for now to check other NA cases
ElectionData <- ElectionData %>% select(-libertarian)
ElectionData %>%
filter(!complete.cases(ElectionData)) %>%
View()
# Retrieving the names of features with missing values.
missingValuesCols <- names(which(colSums(is.na(ElectionData)) > 0))
# Imputing missing values with their respective features' mean value
for(i in 1:ncol(ElectionData)) {
ifelse(is.numeric(ElectionData[,i]),
ElectionData[is.na(ElectionData[,i]), i] <- mean(ElectionData[,i], na.rm = TRUE),
ifelse(is.character(ElectionData[,i]), "NULL", 0)
)
}
# Factorize these 'Quality Assessment Texts' in the data set
ElectionData[sapply(ElectionData, is.character)] <- lapply(ElectionData[sapply(ElectionData, is.character)], as.factor)
names(ElectionData)
ElectionDataEDA <- ElectionData %>% select(v2016, pd2016, pg2016, ppd2016, v2012, pd2012, pg2012, ppd2012, v2008, pd2008,
pg2008, ppd2012, population.2016, geograhic.region)
ElectionDataEDA <- ElectionData %>%
select(v2016, pd2016, pg2016, ppd2016, v2012, pd2012, pg2012, ppd2012, v2008, pd2008, pg2008, ppd2012, population.2016, geograhic.region)
################################################################
# Correlation
################################################################
# numIntFeatures_ElectionData <- ElectionData[sapply(ElectionData, is.numeric)]
corrFeatures_ElectionData <- ElectionData %>%
select(v2016, pd2016, pg2016, ppd2016, v2012, pd2012, pg2012, ppd2012, v2008, pd2008, pg2008, ppd2012, population.2016)
?select
ElectionDataEDA <- ElectionData %>%
dplyr::select(v2016, pd2016, pg2016, ppd2016, v2012, pd2012, pg2012, ppd2012, v2008, pd2008, pg2008, ppd2012, population.2016, geograhic.region)
View(ElectionDataEDA)
percDemocraticVotesStats <- ElectionDataEDA %>%
select(pd2008, pd2012, pd2016) %>%
describe(quant = c(.25, .75), IQR = TRUE) %>%
mutate(year = c(2008, 2012, 2016)) %>%
relocate(year)
percDemocraticVotesStats <- ElectionDataEDA %>%
dplyr::select(pd2008, pd2012, pd2016) %>%
describe(quant = c(.25, .75), IQR = TRUE) %>%
mutate(year = c(2008, 2012, 2016)) %>%
relocate(year)
View(percDemocraticVotesStats)
percRepublicanVotesStats <- ElectionDataEDA %>%
dplyr::select(pg2008, pg2012, pg2016) %>%
describe(quant = c(.25, .75), IQR = TRUE) %>%
mutate(year = c(2008, 2012, 2016)) %>%
relocate(year)
View(ElectionDataEDA)
# Plot of outcome variable 'Total Democratic Votes' by state and year
totalDVotesL <- ElectionData %>%
select(state, vd2008, vd2012, vd2016) %>% group_by(state) %>% summarise('2008' = sum(vd2008, na.rm = TRUE),
'2012' = sum(vd2012, na.rm = TRUE),
'2016' = sum(vd2016, na.rm = TRUE)) %>%
gather(year, tdVotes, c('2008', '2012', '2016'))
# Plot of outcome variable 'Total Democratic Votes' by state and year
totalDVotesL <- ElectionData %>%
dplyr::select(state, vd2008, vd2012, vd2016) %>% group_by(state) %>% summarise('2008' = sum(vd2008, na.rm = TRUE),
'2012' = sum(vd2012, na.rm = TRUE),
'2016' = sum(vd2016, na.rm = TRUE)) %>%
gather(year, tdVotes, c('2008', '2012', '2016'))
View(totalDVotesL)
totalDVotesL <- ElectionData %>%
dplyr::select(state, vd2008, vd2012, vd2016) %>% group_by(state) %>% summarise('2008' = sum(vd2008, na.rm = TRUE),
'2012' = sum(vd2012, na.rm = TRUE),
'2016' = sum(vd2016, na.rm = TRUE))
View(totalDVotesL)
View(totalDVotesL)
ggplot(data = percDVotesL, mapping = aes(x = reorder(factor(state), pdVotes, function(x) -1*sum(x)), y = pdVotes, fill = year)) +
geom_bar(position = "dodge", stat = "identity") +
labs(title = "Percentage Democrat Votes by State & Year") +
scale_x_discrete(name ="Region") +
scale_y_continuous(name = "Percent Democrat Votes", labels = label_number(suffix = " M", scale = 1e-6)) +
theme_bw()
# Plot of outcome variable 'Total Democratic Votes' by state and year
percDVotesL <- ElectionDataEDA %>%
select(geograhic.region, pd2008, pd2012, pd2016) %>% group_by(geograhic.region) %>% summarise('2008' = mean(vd2008, na.rm = TRUE),
'2012' = mean(vd2012, na.rm = TRUE),
'2016' = mean(vd2016, na.rm = TRUE)) %>%
gather(year, pdVotes, c('2008', '2012', '2016'))
# Plot of outcome variable 'Total Democratic Votes' by state and year
percDVotesL <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pd2008, pd2012, pd2016) %>% group_by(geograhic.region) %>% summarise('2008' = mean(vd2008, na.rm = TRUE),
'2012' = mean(vd2012, na.rm = TRUE),
'2016' = mean(vd2016, na.rm = TRUE)) %>%
gather(year, pdVotes, c('2008', '2012', '2016'))
# Plot of outcome variable 'Total Democratic Votes' by state and year
percDVotesL <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pd2008, pd2012, pd2016) %>% group_by(geograhic.region) %>% summarise('2008' = mean(pd2008, na.rm = TRUE),
'2012' = mean(pd2012, na.rm = TRUE),
'2016' = mean(pd2016, na.rm = TRUE)) %>%
gather(year, pdVotes, c('2008', '2012', '2016'))
ggplot(data = percDVotesL, mapping = aes(x = reorder(factor(state), pdVotes, function(x) -1*sum(x)), y = pdVotes, fill = year)) +
geom_bar(position = "dodge", stat = "identity") +
labs(title = "Percentage Democrat Votes by State & Year") +
scale_x_discrete(name ="Region") +
scale_y_continuous(name = "Percent Democrat Votes", labels = label_number(suffix = " M", scale = 1e-6)) +
theme_bw()
View(percDVotesL)
ggplot(data = percDVotesL, mapping = aes(x = reorder(factor(geograhic.region), pdVotes, function(x) -1*sum(x)), y = pdVotes, fill = year)) +
geom_bar(position = "dodge", stat = "identity") +
labs(title = "Percentage Democrat Votes by State & Year") +
scale_x_discrete(name ="Region") +
scale_y_continuous(name = "Percent Democrat Votes", labels = label_number(suffix = " M", scale = 1e-6)) +
theme_bw()
ggplot(data = percDVotesL, mapping = aes(x = reorder(factor(geograhic.region), pdVotes, function(x) -1*sum(x)), y = pdVotes, fill = year)) +
geom_bar(position = "dodge", stat = "identity") +
labs(title = "Percentage Democrat Votes by State & Year") +
scale_x_discrete(name ="Region") +
scale_y_continuous(name = "Percent Democrat Votes") +
theme_bw()
# Plot of outcome variable 'Total Republican Votes' by state and year
percRVotesL <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pd2008, pd2012, pd2016) %>% group_by(geograhic.region) %>% summarise('2008' = mean(pd2008, na.rm = TRUE),
'2012' = mean(pd2012, na.rm = TRUE),
'2016' = mean(pd2016, na.rm = TRUE)) %>%
gather(year, pgVotes, c('2008', '2012', '2016'))
View(percRVotesL)
?relocate
percRepublicanVotesStatsReg <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pg2008, pg2012, pg2016) %>%
describe(quant = c(.25, .75), IQR = TRUE)
View(percRepublicanVotesStatsReg)
percRepublicanVotesStatsReg <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pg2008, pg2012, pg2016) %>% group_by(geograhic.region) %>%
describe(quant = c(.25, .75), IQR = TRUE)
View(percRepublicanVotesStatsReg)
View(percRepublicanVotesStatsReg)
percRepublicanVotesStatsReg <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pg2008, pg2012, pg2016) %>% group_by(geograhic.region) %>%
describe(quant = c(.25, .75), IQR = TRUE)
View(percRepublicanVotesStatsReg)
unique(ElectionDataEDA$geograhic.region)
percRepublicanVotesStatsReg <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pg2008, pg2012, pg2016) %>% filter(geograhic.region == "South") %>% dplyr::select(-geograhic.region)
View(percRepublicanVotesStatsReg)
percRepublicanVotesStatsReg <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pg2008, pg2012, pg2016) %>% filter(geograhic.region == "South") %>% dplyr::select(-geograhic.region) %>%
describe(quant = c(.25, .75), IQR = TRUE)
percRepublicanVotesStatsReg <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pg2008, pg2012, pg2016) %>% filter(geograhic.region == "South") %>%
dplyr::select(-geograhic.region) %>% describe(quant = c(.25, .75), IQR = TRUE)
View(percRepublicanVotesStatsReg)
percRepublicanVotesStatsSouth <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pg2008, pg2012, pg2016) %>% filter(geograhic.region == "South") %>%
dplyr::select(-geograhic.region) %>% describe(quant = c(.25, .75), IQR = TRUE)
percRepublicanVotesStatsWest <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pg2008, pg2012, pg2016) %>% filter(geograhic.region == "West") %>%
dplyr::select(-geograhic.region) %>% describe(quant = c(.25, .75), IQR = TRUE)
percRepublicanVotesStatsNE <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pg2008, pg2012, pg2016) %>% filter(geograhic.region == "Northeast") %>%
dplyr::select(-geograhic.region) %>% describe(quant = c(.25, .75), IQR = TRUE)
percRepublicanVotesStatsMid <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pg2008, pg2012, pg2016) %>% filter(geograhic.region == "Midwest") %>%
dplyr::select(-geograhic.region) %>% describe(quant = c(.25, .75), IQR = TRUE)
percRepublicanVotesStatReg <- rbind(percRepublicanVotesStatsSouth, percRepublicanVotesStatsWest, percRepublicanVotesStatsNE,
percRepublicanVotesStatsMid)
View(percRepublicanVotesStatReg)
View(percRepublicanVotesStatReg)
percRepublicanVotesStatsSouth <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pg2008, pg2012, pg2016) %>% filter(geograhic.region == "South") %>%
dplyr::select(-geograhic.region) %>% describe(quant = c(.25, .75), IQR = TRUE) %>% mutate(vars = "South")
percRepublicanVotesStatsWest <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pg2008, pg2012, pg2016) %>% filter(geograhic.region == "West") %>%
dplyr::select(-geograhic.region) %>% describe(quant = c(.25, .75), IQR = TRUE) %>% mutate(vars = "West")
percRepublicanVotesStatsNE <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pg2008, pg2012, pg2016) %>% filter(geograhic.region == "Northeast") %>%
dplyr::select(-geograhic.region) %>% describe(quant = c(.25, .75), IQR = TRUE) %>% mutate(vars = "Northeast")
percRepublicanVotesStatsMid <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pg2008, pg2012, pg2016) %>% filter(geograhic.region == "Midwest") %>%
dplyr::select(-geograhic.region) %>% describe(quant = c(.25, .75), IQR = TRUE) %>% mutate(vars = "Midwest")
percRepublicanVotesStatReg <- rbind(percRepublicanVotesStatsSouth, percRepublicanVotesStatsWest, percRepublicanVotesStatsNE,
percRepublicanVotesStatsMid)
View(percRepublicanVotesStatReg)
#devtools::install_github("UrbanInstitute/urbnmapr")
library(urbnmapr) # For map
library(ggplot2)  # For map
devtools::install_github("UrbanInstitute/urbnmapr")
install.packages("devtools")
install.packages("devtools")
library(devtools)
devtools::install_github("UrbanInstitute/urbnmapr")
install.packages("cli")
install.packages("cli")
library(devtools)
remove.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("glue")
install.packages("glue")
remove.packages("glue")
devtools::install_github("UrbanInstitute/urbnmapr")
remove.packages("cli")
devtools::install_github("UrbanInstitute/urbnmapr")
View(percRepublicanVotesStatReg)
# Declaring the names of packages to be imported
packageList <- c("tidyverse", "vtable", "RColorBrewer", "corrplot", "car", "psych", "stargazer", "scales", "glmnet",
"Metrics", "caret", "leaps", "MASS", "flextable")
for (package in packageList) {
if (!package %in% rownames(installed.packages()))
{ install.packages(package) }
# Import the package
library(package, character.only = TRUE)
}
# Import/Load the data set
location_harshit <- "~/Documents/Northeastern University/MPS Analytics/ALY 6015/Final Project/Presidential_Election_2016_Classification/"
location_akash <- "C:/Users/rajak/OneDrive/Desktop/Study/University/ALY6015 - Intermediate Analytics/Final Project/Presidential_Election_2016_Classification/"
location <- ifelse(!dir.exists(paths = location_harshit), location_akash, location_harshit)
ElectionData <- read.csv(paste0(location, "Data/2016Election.csv"))
# Function to save table as 3 line format
threeLineTable <- function(df, title, footer, file_name){
ft <- flextable(df)
ft <- theme_vanilla(ft)
ft <- add_footer_lines(ft, footer)
ft <- flextable::color(ft, part = "footer", color = "#666666")
ft <- set_caption(ft, caption = title)
save_as_docx(ft, path =  paste0(path, file_name, ".docx"))
}
# Function to save table as 3 line format
threeLineTable <- function(df, title, footer, file_name){
ft <- flextable(df)
ft <- theme_booktabs(ft)
ft <- add_footer_lines(ft, footer)
ft <- flextable::color(ft, part = "footer", color = "#666666")
ft <- set_caption(ft, caption = title)
save_as_docx(ft, path =  paste0(path, file_name, ".docx"))
}
# Function to save table as 3 line format
threeLineTable <- function(df, title, footer, file_name){
ft <- flextable(df)
ft <- theme_booktabs(ft)
ft <- add_footer_lines(ft, footer)
ft <- flextable::color(ft, part = "footer", color = "#666666")
ft <- set_caption(ft, caption = title)
save_as_docx(ft, path =  paste0(location, "/Tables/", file_name, ".docx"))
}
threeLineTable(ElectionData[1:5,1:8], "Table 1: Data Snapshot", "", "Data")
# Declaring the names of packages to be imported
packageList <- c("tidyverse", "vtable", "RColorBrewer", "corrplot", "car", "psych", "stargazer", "scales", "glmnet",
"Metrics", "caret", "leaps", "MASS", "flextable")
for (package in packageList) {
if (!package %in% rownames(installed.packages()))
{ install.packages(package) }
# Import the package
library(package, character.only = TRUE)
}
# Import/Load the data set
location_harshit <- "~/Documents/Northeastern University/MPS Analytics/ALY 6015/Final Project/Presidential_Election_2016_Classification/"
location_akash <- "C:/Users/rajak/OneDrive/Desktop/Study/University/ALY6015 - Intermediate Analytics/Final Project/Presidential_Election_2016_Classification/"
location <- ifelse(!dir.exists(paths = location_harshit), location_akash, location_harshit)
ElectionData <- read.csv(paste0(location, "Data/2016Election.csv"))
# Function to save table as 3 line format
threeLineTable <- function(df, title, footer, file_name){
ft <- flextable(df)
ft <- theme_booktabs(ft)
ft <- add_footer_lines(ft, footer)
ft <- flextable::color(ft, part = "footer", color = "#666666")
ft <- set_caption(ft, caption = title)
save_as_docx(ft, path =  paste0(location, "/Tables/", file_name, ".docx"))
}
View(ElectionData)
threeLineTable(ElectionData[1:5, 4:11], "Table 1: Snapshot of Data", "Snapshot of Election Data Sample", "Data Snapshot")
# ------------------------------------- Merging External Data sets ----------------------------------- #
# Reading new external data set
population <- read.csv(paste0(location, "Data/USPopulationByCounty.csv"))
election2020 <- read.csv(paste0(location, "Data/2020ElectionResults.csv"))
region <- read.csv(paste0(location, "Data/Regions.csv"))
View(population)
View(population)
election2020 <- read.csv(paste0(location, "Data/2020ElectionResults.csv"))
View(election2020)
region <- read.csv(paste0(location, "Data/Regions.csv"))
View(region)
threeLineTable(population[1:5, 2:8], "Table 1: Snapshot of external population data", "Snapshot of population data sample", "Population Snapshot")
threeLineTable(election2020[1:5, ], "Table 2: Snapshot of external 2020 election results data", "Snapshot of 2020 election results data", "Election 2020 Snapshot")
threeLineTable(region[1:5, ], "Table 3: Sample of additional region variable created", "", "Region Snapshot")
# Combining the external data sets with the original election data sets
ElectionData <- ElectionData %>% inner_join(population, by = c("county", "state"))
election2020$county_fips <- as.factor(election2020$county_fips)
ElectionData$c_fips <- as.factor(ElectionData$c_fips)
ElectionData <- ElectionData %>% inner_join(election2020, by = c("c_fips" = "county_fips"))
ElectionData <- ElectionData %>% inner_join(region, by = c("state" = "state.code"))
View(ElectionData)
ElectionData <- ElectionData %>% inner_join(region, by = c("state" = "state.code"))
ElectionData <- read.csv(paste0(location, "Data/2016Election.csv"))
# Function to save table as 3 line format
threeLineTable <- function(df, title, footer, file_name){
ft <- flextable(df)
ft <- theme_booktabs(ft)
ft <- add_footer_lines(ft, footer)
ft <- flextable::color(ft, part = "footer", color = "#666666")
ft <- set_caption(ft, caption = title)
save_as_docx(ft, path =  paste0(location, "/Tables/", file_name, ".docx"))
}
threeLineTable(ElectionData[1:5, 4:11], "Table 1: Snapshot of Data", "Snapshot of Election Data Sample", "Data Snapshot")
# ------------------------------------- Merging External Data sets ----------------------------------- #
# Reading new external data set
population <- read.csv(paste0(location, "Data/USPopulationByCounty.csv"))
election2020 <- read.csv(paste0(location, "Data/2020ElectionResults.csv"))
region <- read.csv(paste0(location, "Data/Regions.csv"))
threeLineTable(population[1:5, 2:8], "Table 1: Snapshot of external population data", "Snapshot of population data sample", "Population Snapshot")
threeLineTable(election2020[1:5, ], "Table 2: Snapshot of external 2020 election results data", "Snapshot of 2020 election results data", "Election 2020 Snapshot")
threeLineTable(region[1:5, ], "Table 3: Sample of additional region variable created", "", "Region Snapshot")
# Combining the external data sets with the original election data sets
ElectionData <- ElectionData %>% inner_join(population, by = c("county", "state"))
election2020$county_fips <- as.factor(election2020$county_fips)
ElectionData$c_fips <- as.factor(ElectionData$c_fips)
ElectionData <- ElectionData %>% inner_join(election2020, by = c("c_fips" = "county_fips"))
ElectionData <- ElectionData %>% inner_join(region, by = c("state" = "state.code"))
################################################################
# Checking the records with missing/NA values
################################################################
# Since, libertarian feature has almost all the data points as NA. We're removing it for now to check other NA cases
ElectionData <- ElectionData %>% select(-libertarian)
View(ElectionData)
################################################################
# Checking the records with missing/NA values
################################################################
# Since, libertarian feature has almost all the data points as NA. We're removing it for now to check other NA cases
ElectionData <- ElectionData %>% dplyr::select(-libertarian)
ElectionData %>%
filter(!complete.cases(ElectionData)) %>%
View()
missingRecords <- ElectionData %>% filter(!complete.cases(ElectionData))
View(missingRecords)
threeLineTable(population[1:5, 2:8], "Table 2: Snapshot of external population data", "Snapshot of population data sample", "Population Snapshot")
threeLineTable(election2020[1:5, ], "Table 3: Snapshot of external 2020 election results data", "Snapshot of 2020 election results data", "Election 2020 Snapshot")
threeLineTable(region[1:5, ], "Table 4: Sample of additional region variable created", "", "Region Snapshot")
threeLineTable(missingRecords[, 4:11], "Table 4: Records with missing data", "", "Missing Data")
# Retrieving the names of features with missing values.
missingValuesCols <- names(which(colSums(is.na(ElectionData)) > 0))
# Imputing missing values with their respective features' mean value
for(i in 1:ncol(ElectionData)) {
ifelse(is.numeric(ElectionData[,i]),
ElectionData[is.na(ElectionData[,i]), i] <- mean(ElectionData[,i], na.rm = TRUE),
ifelse(is.character(ElectionData[,i]), "NULL", 0)
)
}
# Factorize these 'Quality Assessment Texts' in the data set
ElectionData[sapply(ElectionData, is.character)] <- lapply(ElectionData[sapply(ElectionData, is.character)], as.factor)
ElectionDataEDA <- ElectionData %>%
dplyr::select(v2016, pd2016, pg2016, ppd2016, v2012, pd2012, pg2012, ppd2012, v2008, pd2008, pg2008, ppd2012, population.2016, geograhic.region)
percDemocraticVotesStats <- ElectionDataEDA %>%
dplyr::select(pd2008, pd2012, pd2016) %>%
describe(quant = c(.25, .75), IQR = TRUE) %>%
mutate(year = c(2008, 2012, 2016)) %>%
relocate(year)
percRepublicanVotesStats <- ElectionDataEDA %>%
dplyr::select(pg2008, pg2012, pg2016) %>%
describe(quant = c(.25, .75), IQR = TRUE) %>%
mutate(year = c(2008, 2012, 2016)) %>%
relocate(year)
percRepublicanVotesStatsSouth <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pg2008, pg2012, pg2016) %>% filter(geograhic.region == "South") %>%
dplyr::select(-geograhic.region) %>% describe(quant = c(.25, .75), IQR = TRUE) %>% mutate(vars = "South")
View(percDemocraticVotesStats)
threeLineTable(missingRecords[, 4:11], "Table 5: Records with missing data", "", "Missing Data")
threeLineTable(percRepublicanVotesStats, "Table 7: Descriptive statistics of Republican party %votes by year", "", "Republican votes")
percRepublicanVotesStatsSouth <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pg2008, pg2012, pg2016) %>% filter(geograhic.region == "South") %>%
dplyr::select(-geograhic.region) %>% describe(quant = c(.25, .75), IQR = TRUE) %>% mutate(vars = "South")
View(percRepublicanVotesStatsSouth)
percRepublicanVotesStatsSouth <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pg2008) %>% filter(geograhic.region == "South") %>%
dplyr::select(-geograhic.region) %>% describe(quant = c(.25, .75), IQR = TRUE) %>% mutate(vars = "South")
View(percRepublicanVotesStatsSouth)
percRepublicanVotesStatsSouth <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pg2016) %>% filter(geograhic.region == "South") %>%
dplyr::select(-geograhic.region) %>% describe(quant = c(.25, .75), IQR = TRUE) %>% mutate(vars = "South")
percRepublicanVotesStatsWest <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pg2016) %>% filter(geograhic.region == "West") %>%
dplyr::select(-geograhic.region) %>% describe(quant = c(.25, .75), IQR = TRUE) %>% mutate(vars = "West")
percRepublicanVotesStatsNE <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pg2016) %>% filter(geograhic.region == "Northeast") %>%
dplyr::select(-geograhic.region) %>% describe(quant = c(.25, .75), IQR = TRUE) %>% mutate(vars = "Northeast")
percRepublicanVotesStatsMid <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pg2016) %>% filter(geograhic.region == "Midwest") %>%
dplyr::select(-geograhic.region) %>% describe(quant = c(.25, .75), IQR = TRUE) %>% mutate(vars = "Midwest")
percRepublicanVotesStatReg <- rbind(percRepublicanVotesStatsSouth, percRepublicanVotesStatsWest, percRepublicanVotesStatsNE,
percRepublicanVotesStatsMid)
View(percRepublicanVotesStatReg)
threeLineTable(percRepublicanVotesStatReg, "Table 7: Descriptive statistics of Republican party %votes by region", "", "Republican votes region")
# Plot of outcome variable 'Total Democratic Votes' by state and year
percDVotesL <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pd2008, pd2012, pd2016) %>% group_by(geograhic.region) %>% summarise('2008' = mean(pd2008, na.rm = TRUE),
'2012' = mean(pd2012, na.rm = TRUE),
'2016' = mean(pd2016, na.rm = TRUE)) %>%
gather(year, pdVotes, c('2008', '2012', '2016'))
View(percDVotesL)
ggplot(data = percDVotesL, mapping = aes(x = reorder(factor(geograhic.region), pdVotes, function(x) -1*sum(x)), y = pdVotes, fill = year)) +
geom_bar(position = "dodge", stat = "identity") +
labs(title = "Percentage Democrat Votes by Region & Year") +
scale_x_discrete(name ="Region") +
scale_y_continuous(name = "Percent Democrat Votes") +
theme_bw()
# Plot of outcome variable 'Total Republican Votes' by state and year
percRVotesL <- ElectionDataEDA %>%
dplyr::select(geograhic.region, pd2008, pd2012, pd2016) %>% group_by(geograhic.region) %>% summarise('2008' = mean(pd2008, na.rm = TRUE),
'2012' = mean(pd2012, na.rm = TRUE),
'2016' = mean(pd2016, na.rm = TRUE)) %>%
gather(year, pgVotes, c('2008', '2012', '2016'))
ggplot(data = percRVotesL, mapping = aes(x = reorder(factor(geograhic.region), tgVotes, function(x) -1*sum(x)), y = pgVotes, fill = year)) +
geom_bar(position = "dodge", stat = "identity") +
labs(title = "Percent Republican Votes by Region & Year") +
scale_x_discrete(name ="Region") +
scale_y_continuous(name = "Percent Republican Votes") +
theme_bw()
ggplot(data = percRVotesL, mapping = aes(x = reorder(factor(geograhic.region), pgVotes, function(x) -1*sum(x)), y = pgVotes, fill = year)) +
geom_bar(position = "dodge", stat = "identity") +
labs(title = "Percent Republican Votes by Region & Year") +
scale_x_discrete(name ="Region") +
scale_y_continuous(name = "Percent Republican Votes") +
theme_bw()
View(ElectionData)
View(ElectionData)
View(ElectionData)
threeLineTable(ElectionData[1:5, 159:165], "Table 2: New variables added to the master data", "", "Appended data")
threeLineTable(ElectionData[1:5, 159:165], "Table 2: New variables added to the master data", "", "Appended data")
# Declaring the names of packages to be imported
packageList <- c("tidyverse", "vtable", "RColorBrewer", "corrplot", "car", "psych", "stargazer", "scales", "glmnet",
"Metrics", "caret", "leaps", "MASS", "flextable")
for (package in packageList) {
if (!package %in% rownames(installed.packages()))
{ install.packages(package) }
# Import the package
library(package, character.only = TRUE)
}
threeLineTable(ElectionData[1:5, 159:165], "Table 2: New variables added to the master data", "", "Appended data")
threeLineTable(ElectionData[1:5, 157:165], "Table 2: New variables added to the master data", "", "Appended data")
